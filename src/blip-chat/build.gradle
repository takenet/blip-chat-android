apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

// This is the library version used when deploying the artifact
version = "3.0." + System.getenv("BUILD_NUMBER") as String ?: '-SNAPSHOT'

android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 33
        versionCode 1
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            buildConfigField 'String', 'SCRIPT_SDK_URL', '"https://unpkg.com/blip-chat-widget"'
            buildConfigField 'String', 'BLIP_CHAT_URL', '"https://chat.blip.ai/"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            buildConfigField 'String', 'SCRIPT_SDK_URL', '"https://takenetomni.blob.core.windows.net/media-db/blip-chat-widget-hmg.js"'
            buildConfigField 'String', 'BLIP_CHAT_URL', '"https://hmg-chat.blip.ai/"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    testImplementation 'junit:junit:4.12'

    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation "org.robolectric:robolectric:3.1"
}

//Reference: https://gist.github.com/lopspower/6f62fe1492726d848d6d

def siteUrl = 'https://github.com/takenet/blip-chat-android'      // Homepage URL of the library
def gitUrl = 'https://github.com/takenet/blip-chat-android.git'   // Git repository URL
group = "net.take"                                          // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates pom.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'net.take:blip-chat'
                description = 'Add BLiP Chat widget in your Android app'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'DEVELOPER_ID'
                        name 'NAME_DEVELOPER'
                        email 'EMAIL@EMAIL.COM'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

def gradlePropsFile = project.rootProject.file('gradle.properties')
Properties properties = new Properties()

if (gradlePropsFile.exists()) {
    properties.load(gradlePropsFile.newDataInputStream())
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

artifacts {
    archives androidSourcesJar
}

ext {
    PUBLISH_GROUP_ID = 'io.github.takenet'
    PUBLISH_VERSION = '3.0.00.0'
    PUBLISH_ARTIFACT_ID = 'blipchat'
    PUBLISH_DESCRIPTION = 'BlipChat Android SDK'
    PUBLISH_URL = 'https://github.com/takenet/blip-chat-android'
    PUBLISH_LICENSE_NAME = 'Apache License'
    PUBLISH_LICENSE_URL =
            'https://github.com/takenet/blip-chat-android/blob/master/LICENSE'
    PUBLISH_DEVELOPER_ID = 'takenet'
    PUBLISH_DEVELOPER_NAME = 'Take Blip'
    PUBLISH_DEVELOPER_EMAIL = 'blip@take.net'
    PUBLISH_SCM_CONNECTION =
            'scm:git:github.com/takenet/blip-chat-android.git'
    PUBLISH_SCM_DEVELOPER_CONNECTION =
            'scm:git:ssh://github.com/takenet/blip-chat-android.git'
    PUBLISH_SCM_URL =
            'https://github.com/takenet/blip-chat-android/tree/master'
}
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'Blip chat SDK'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/takenet/blip-chat-android'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = ''
                        name = ''
                        email = ''
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    connection = 'scm:git:github.com/takenet/blip-chat-android.git'
                    developerConnection = 'scm:git:ssh://github.com/takenet/blip-chat-android.git'
                    url = 'https://github.com/takenet/blip-chat-android/tree/master'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "sonatype"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
