apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

// This is the library version used when deploying the artifact
version = "3.0." + System.getenv("BUILD_NUMBER") as String ?: '-SNAPSHOT'

android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 33
        versionCode 1
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            buildConfigField 'String', 'SCRIPT_SDK_URL', '"https://unpkg.com/blip-chat-widget"'
            buildConfigField 'String', 'BLIP_CHAT_URL', '"https://chat.blip.ai/"'
        }
        debug{
            minifyEnabled false
            buildConfigField 'String', 'SCRIPT_SDK_URL', '"https://unpkg.com/blip-chat-widget"'
            buildConfigField 'String', 'BLIP_CHAT_URL', '"https://chat.blip.ai/"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    testImplementation 'junit:junit:4.12'

    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation "org.robolectric:robolectric:3.1"
}



def gradlePropsFile = project.rootProject.file('gradle.properties')
Properties properties = new Properties()

if (gradlePropsFile.exists()) {
    properties.load(gradlePropsFile.newDataInputStream())
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

artifacts {
    archives androidSourcesJar
}

ext {
    PUBLISH_GROUP_ID = 'io.github.takenet'
    PUBLISH_VERSION = '3.0.01.2'
    PUBLISH_ARTIFACT_ID = 'blipchat'
    PUBLISH_DESCRIPTION = 'BlipChat Android SDK'
    PUBLISH_URL = 'https://github.com/takenet/blip-chat-android'
    PUBLISH_LICENSE_NAME = 'Apache License'
    PUBLISH_LICENSE_URL =
            'https://github.com/takenet/blip-chat-android/blob/master/LICENSE'
    PUBLISH_DEVELOPER_ID = 'takenet'
    PUBLISH_DEVELOPER_NAME = 'Take Blip'
    PUBLISH_DEVELOPER_EMAIL = 'blip@take.net'
    PUBLISH_SCM_CONNECTION =
            'scm:git:github.com/takenet/blip-chat-android.git'
    PUBLISH_SCM_DEVELOPER_CONNECTION =
            'scm:git:ssh://github.com/takenet/blip-chat-android.git'
    PUBLISH_SCM_URL =
            'https://github.com/takenet/blip-chat-android/tree/master'
}
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["ossrhBearerToken"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["ossrhBearerToken"] = System.getenv('OSSH_BEARER_TOKEN')
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'Blip chat SDK'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/takenet/blip-chat-android'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = ''
                        name = ''
                        email = ''
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    connection = 'scm:git:github.com/takenet/blip-chat-android.git'
                    developerConnection = 'scm:git:ssh://github.com/takenet/blip-chat-android.git'
                    url = 'https://github.com/takenet/blip-chat-android/tree/master'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "central"
            url = "https://central.sonatype.com/api/v1/publisher/upload"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

signing {
    sign publishing.publications
}

// Task to generate checksums
task generateChecksums {
    dependsOn 'assembleRelease'
    dependsOn 'publishReleasePublicationToMavenLocal'
    
    doLast {
        def localRepo = "${System.getProperty('user.home')}/.m2/repository"
        def groupPath = PUBLISH_GROUP_ID.replace('.', '/')
        def artifactPath = "${localRepo}/${groupPath}/${PUBLISH_ARTIFACT_ID}/${PUBLISH_VERSION}"
        
        // Find all files in the directory
        fileTree(artifactPath).each { file ->
            if (file.isFile() && !file.name.endsWith('.md5') && !file.name.endsWith('.sha1') && !file.name.endsWith('.sha256') && !file.name.endsWith('.sha512')) {
                def fileName = file.name
                
                // Generate MD5
                def md5 = java.security.MessageDigest.getInstance("MD5")
                file.eachByte(4096) { bytes, size ->
                    md5.update(bytes, 0, size)
                }
                def md5Hash = md5.digest().collect { String.format("%02x", it) }.join()
                new File(file.parent, "${fileName}.md5").text = md5Hash
                
                // Generate SHA1
                def sha1 = java.security.MessageDigest.getInstance("SHA-1")
                file.eachByte(4096) { bytes, size ->
                    sha1.update(bytes, 0, size)
                }
                def sha1Hash = sha1.digest().collect { String.format("%02x", it) }.join()
                new File(file.parent, "${fileName}.sha1").text = sha1Hash
                
                // Generate SHA256
                def sha256 = java.security.MessageDigest.getInstance("SHA-256")
                file.eachByte(4096) { bytes, size ->
                    sha256.update(bytes, 0, size)
                }
                def sha256Hash = sha256.digest().collect { String.format("%02x", it) }.join()
                new File(file.parent, "${fileName}.sha256").text = sha256Hash
                
                // Generate SHA512
                def sha512 = java.security.MessageDigest.getInstance("SHA-512")
                file.eachByte(4096) { bytes, size ->
                    sha512.update(bytes, 0, size)
                }
                def sha512Hash = sha512.digest().collect { String.format("%02x", it) }.join()
                new File(file.parent, "${fileName}.sha512").text = sha512Hash
                
                println "Checksums generated for: ${fileName}"
            }
        }
    }
}

// Task to generate bundle for the new Sonatype Central
task generateBundle(type: Zip) {
    dependsOn 'generateChecksums'
    dependsOn 'signReleasePublication'
    
    def localRepo = "${System.getProperty('user.home')}/.m2/repository"
    def groupPath = PUBLISH_GROUP_ID.replace('.', '/')
    def artifactPath = "${localRepo}/${groupPath}/${PUBLISH_ARTIFACT_ID}/${PUBLISH_VERSION}"
    
    // Include all files including GPG signatures with proper Maven structure
    from(artifactPath) {
        include '*.pom'
        include '*.pom.asc'
        include '*.pom.md5' 
        include '*.pom.sha1'
        include '*.pom.sha256'
        include '*.pom.sha512'
        include '*.pom.asc.md5'
        include '*.pom.asc.sha1'
        include '*.pom.asc.sha256'
        include '*.pom.asc.sha512'
        include '*.aar'
        include '*.aar.asc'
        include '*.aar.md5'
        include '*.aar.sha1'
        include '*.aar.sha256'
        include '*.aar.sha512'
        include '*.aar.asc.md5'
        include '*.aar.asc.sha1'
        include '*.aar.asc.sha256'
        include '*.aar.asc.sha512'
        include '*-sources.jar'
        include '*-sources.jar.asc'
        include '*-sources.jar.md5'
        include '*-sources.jar.sha1'
        include '*-sources.jar.sha256'
        include '*-sources.jar.sha512'
        include '*-sources.jar.asc.md5'
        include '*-sources.jar.asc.sha1'
        include '*-sources.jar.asc.sha256'
        include '*-sources.jar.asc.sha512'
        
        // Set proper Maven Central directory structure
        into "${PUBLISH_GROUP_ID.replace('.', '/')}/${PUBLISH_ARTIFACT_ID}/${PUBLISH_VERSION}"
    }
    
    includeEmptyDirs = false
    
    archiveFileName = "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}-bundle.zip"
    destinationDirectory = file("${buildDir}/distributions")
    
    doFirst {
        // Verify all required files exist
        def requiredFiles = [
            "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}.pom",
            "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}.pom.asc",
            "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}.aar",
            "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}.aar.asc",
            "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}-sources.jar",
            "${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}-sources.jar.asc"
        ]
        
        requiredFiles.each { fileName ->
            def file = new File(artifactPath, fileName)
            if (!file.exists()) {
                throw new Exception("Required file missing: ${file.absolutePath}")
            }
        }
    }
    
    doLast {
        println "Bundle generated at: ${destinationDirectory}/${archiveFileName.get()}"
        println "Bundle size: ${new File(destinationDirectory.get().asFile, archiveFileName.get()).length()} bytes"
        println "Manual upload at: https://central.sonatype.com/publishing"
    }
}

// Task to upload via new Central API
task uploadToCentral {
    dependsOn 'generateBundle'
    
    doLast {
        def bundlePath = "${buildDir}/distributions/${PUBLISH_ARTIFACT_ID}-${PUBLISH_VERSION}-bundle.zip"
        def uploadUrl = "https://central.sonatype.com/api/v1/publisher/upload"
        
        // Verify bundle exists
        def bundleFile = new File(bundlePath)
        if (!bundleFile.exists()) {
            throw new Exception("Bundle file not found: ${bundlePath}")
        }
        
        // Verify token exists
        if (!ossrhBearerToken || ossrhBearerToken.trim().isEmpty()) {
            throw new Exception("Bearer token (ossrhBearerToken) is required for upload")
        }
        
        println "Uploading bundle: ${bundleFile.name} (${bundleFile.length()} bytes)"
        println "Upload URL: ${uploadUrl}"
        
        try {
            exec {
                commandLine 'curl', '-v', '-X', 'POST',
                    '-H', "Authorization: Bearer ${ossrhBearerToken}",
                    '-H', 'Content-Type: multipart/form-data',
                    '-F', "bundle=@${bundlePath}",
                    '--fail-with-body',
                    uploadUrl
            }
            println "Upload completed successfully!"
        } catch (Exception e) {
            println "Upload failed: ${e.message}"
            println "Check your bearer token and bundle content"
            throw e
        }
    }
}
