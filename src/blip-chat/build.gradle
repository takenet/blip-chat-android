apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

// This is the library version used when deploying the artifact
version = "3.0." + System.getenv("BUILD_NUMBER") as String ?: '-SNAPSHOT'

android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 33
        versionCode 1
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            buildConfigField 'String', 'SCRIPT_SDK_URL', '"https://unpkg.com/blip-chat-widget"'
            buildConfigField 'String', 'BLIP_CHAT_URL', '"https://chat.blip.ai/"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            buildConfigField 'String', 'SCRIPT_SDK_URL', '"https://unpkg.com/blip-chat-widget"'
            buildConfigField 'String', 'BLIP_CHAT_URL', '"https://hmg-chat.blip.ai/"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    testImplementation 'junit:junit:4.12'

    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation "org.robolectric:robolectric:3.1"
}

//Reference: https://gist.github.com/lopspower/6f62fe1492726d848d6d

def siteUrl = 'https://github.com/takenet/blip-chat-android'      // Homepage URL of the library
def gitUrl = 'https://github.com/takenet/blip-chat-android.git'   // Git repository URL
group = "net.take"                                          // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates pom.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'net.take:blip-chat'
                description = 'Add BLiP Chat widget in your Android app'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'DEVELOPER_ID'
                        name 'NAME_DEVELOPER'
                        email 'EMAIL@EMAIL.COM'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

def gradlePropsFile = project.rootProject.file('gradle.properties')
Properties properties = new Properties()

if (gradlePropsFile.exists()) {
    properties.load(gradlePropsFile.newDataInputStream())
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

task androidJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.source
    classpath += files(android.getBootClasspath().join(File.pathSeparator))
    options.addStringOption('Xdoclint:none', '-quiet')  // desativa warnings
    exclude 'android/support/**'  // exclui pacotes problemáticos
}

task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    archiveClassifier.set('javadoc')
    from androidJavadoc.destinationDir
}

task javaJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    // ou, para classes compiladas, você pode usar:
    from('build/intermediates/javac/release/classes') // caminho varia conforme versão Android Gradle Plugin
    archiveBaseName.set('blipchat')
    archiveVersion.set('3.0.00.6')
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocJar
    archives javaJar
}

ext {
    PUBLISH_GROUP_ID = 'io.github.takenet'
    PUBLISH_VERSION = '3.0.00.6'
    PUBLISH_ARTIFACT_ID = 'blipchat'
    PUBLISH_DESCRIPTION = 'BlipChat Android SDK'
    PUBLISH_URL = 'https://github.com/takenet/blip-chat-android'
    PUBLISH_LICENSE_NAME = 'Apache License'
    PUBLISH_LICENSE_URL =
            'https://github.com/takenet/blip-chat-android/blob/master/LICENSE'
    PUBLISH_DEVELOPER_ID = 'takenet'
    PUBLISH_DEVELOPER_NAME = 'Take Blip'
    PUBLISH_DEVELOPER_EMAIL = 'blip@take.net'
    PUBLISH_SCM_CONNECTION =
            'scm:git:github.com/takenet/blip-chat-android.git'
    PUBLISH_SCM_DEVELOPER_CONNECTION =
            'scm:git:ssh://github.com/takenet/blip-chat-android.git'
    PUBLISH_SCM_URL =
            'https://github.com/takenet/blip-chat-android/tree/master'
}
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-${version}.aar")
            artifact androidSourcesJar
            artifact androidJavadocJar
            artifact javaJar

            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'Blip chat SDK'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/takenet/blip-chat-android'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = ''
                        name = ''
                        email = ''
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    connection = 'scm:git:github.com/takenet/blip-chat-android.git'
                    developerConnection = 'scm:git:ssh://github.com/takenet/blip-chat-android.git'
                    url = 'https://github.com/takenet/blip-chat-android/tree/master'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = uri('file://' + new File(buildDir, 'repo'))
        }
    }
}

import java.security.MessageDigest

def hashAlgorithms = ['MD5', 'SHA-1', 'SHA-256', 'SHA-512']

def generateChecksum(File file, String algorithm) {
    MessageDigest digest = MessageDigest.getInstance(algorithm)
    file.withInputStream { is ->
        byte[] buffer = new byte[8192]
        int read = 0
        while ((read = is.read(buffer)) > 0) {
            digest.update(buffer, 0, read)
        }
    }
    return digest.digest().encodeHex().toString()
}

task generateChecksums {
    dependsOn 'assembleRelease' // Garante que o AAR já está pronto
    doLast {
        def aarFile = file("$buildDir/outputs/aar/${project.getName()}-${PUBLISH_VERSION}.aar")
        if (!aarFile.exists()) {
            throw new GradleException("Arquivo AAR não encontrado: ${aarFile}")
        }
        hashAlgorithms.each { algo ->
            def checksum = generateChecksum(aarFile, algo)
            def checksumFile = new File(aarFile.parent, "${aarFile.name}.${algo.toLowerCase().replaceAll('-', '')}")
            checksumFile.text = checksum
            println "Gerado checksum ${algo} para ${aarFile.name} em ${checksumFile.name}"
        }
    }
}

task generateAscChecksums {
    dependsOn 'publish' // publish gera os arquivos assinados (.asc)
    doLast {
        def repoDir = file("$buildDir/repo/${PUBLISH_GROUP_ID.replace('.', '/')}/${PUBLISH_ARTIFACT_ID}/${PUBLISH_VERSION}")
        if (!repoDir.exists()) {
            throw new GradleException("Diretório do repositório local não encontrado: ${repoDir}")
        }

        repoDir.eachFileMatch(~/.+\.asc$/) { File ascFile ->
            hashAlgorithms.each { algo ->
                def checksum = generateChecksum(ascFile, algo)
                def checksumFile = new File(ascFile.parent, "${ascFile.name}.${algo.toLowerCase().replaceAll('-', '')}")
                checksumFile.text = checksum
                println "Gerado checksum ${algo} para arquivo ${ascFile.name} em ${checksumFile.name}"
            }
        }
    }
}

afterEvaluate {
    def versionName = android.defaultConfig.versionName
    def buildType = "release"
    def aarDir = "$buildDir/outputs/aar"
    def originalAar = file("$aarDir/${project.name}-${buildType}.aar")
    def renamedAar = file("$aarDir/${project.name}-${PUBLISH_VERSION}.aar")

    tasks.register("renameAar") {
        dependsOn "assembleRelease"
        doLast {
            if (originalAar.exists()) {
                println "Renomeando ${originalAar.name} para ${renamedAar.name}"
                originalAar.renameTo(renamedAar)
            } else {
                println "Arquivo original não encontrado: ${originalAar}"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

//Para gerar os arquivos conforme a doc: https://central.sonatype.org/publish/publish-portal-upload/
// no terminal do Android Studio execute:

/*

./gradlew :blip-chat:assembleRelease
./gradlew :blip-chat:renameAar
./gradlew :blip-chat:generateChecksums
./gradlew :blip-chat:generateAscChecksums
./gradlew blip-chat:publishMavenJavaPublicationToMavenRepository
 */

// Os arquivos estarão em:
// .....blip-chat-android\src\blip-chat\build\repo\io\github\takenet\blipchat\3.0.00.6